swirl()
swirl
library("swirl")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.list(flags)
class(flags$name)
class(as.list(flags)$name)
class(as.list(flags))
as.character((cls_list))
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,summ)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(x) x[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
set(c(1,2,3))
makeVector(c(1,2,3))
x$getmean()
x
x <- c(1,2,3)
x$getmean()
x = numeric()
x
x <- "c"
x
class(c)
class("c")
x = numeric()
class("c")
x
getwd()
cd Rprog
setwd("Rprog")
dir()
setwd("ProgrammingAssignment2/")
getwd()
dir()
source("cachematrix.R")
x <- numeric()
class(x)
c <- vector()
class(c)
dir()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector((2))
makeVector(2)
makeVector$set(2)
traceback()
makeVector$set(2)
browser()
makeVector$set(2)
x <- x$getmean()
x <- makeVector(2)
x
x$get()
x$set()
x <- makeVector(c(1,2,3,4))
x
x$get()
x <- makeVector()
x
x$get()
class(x$get())
x <- makeVector(c(1,2,3,4))
class(x)
x$get()
x$getmean()
x$setmean()
x$setmean(3)
x$getmean()
x$get()
matrix(0,0,0)
matrix(1,0,0)
m <- matrix(2,0,0)
m
x <- matrix()
x
solve(x)
if(is.na(x)) {
print("yes")
}
x <- matrix(NULL)
x <- matrix("NULL")
x
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt <- makeCacheMatrix(matrix(1:4,2,2))
matt
matt$getMatrix
matt$setMatrix(matt)
matt$getMatrixInv
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mv <- makeVector(c(1,2,3))
mv
mv$get()
matt$getMatrix()
matt
mv$set()
mv$set(2)
mv$get()
matt <- makeCacheMatrix(matrix(1:4,2,2))
matt
mv
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt <- makeCacheMatrix(matrix(1:4,2,2))
matt
matt$getMatrix()
matt$getMatrixInv()
mv$getmean()
mv
mv$get()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt$setMatrixInv(matrix(1:2,1,1))
matt$getMatrix()
matt$getMatrixInv()
trace()
traceback()
matt$getMatrixInv()
traceback()
cacheSolve(matt)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
?$
?'$'
is.atomic(matt)
is.atomic(mv)
is.atomic(list)
is.atomic(vector)
is.atomic(numeric)
is.recursive(matt)
is.recursive(mv)
is.recursive(c(1))
is.recursive(vector)
is.atomic(matt)
is.atomic(vector)
is.atomic(mv)
class(mv)
class(matt)
matt
matt$setMatrixInv()
matt$setMatrix()
matt$setMatrix(1)
matt$getMatrix()
matt$getMatrixInv()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt$getMatrixInv()
mv$getmean()
matt$getMatrix()
matt$setMatrix(matrix(1:4,2,2))
matt$getMatrix()
matt$setMatrixInv(matrix(4:1,2,2))
matt$getMatrixInv()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt$getMatrixInv()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt <- matrix(1:4,2,2)
invmat <- makeCacheMatrix(matt)
cacheSolve(invmat)
invmat
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt <- matrix(1:4,2,2)
invmat <- makeCacheMatrix(matt)
cacheSolve
cacheSolve(invmat)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt <- matrix(1:4,2,2)
invmat <- makeCacheMatrix(matt)
cacheSolve(invmat)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
invmat
solve(matt)
cacheSolve(matt)
cacheSolve(invmat)
cacheSolve(invmat)
cacheSolve(invmat)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
cacheSolve(invmat)
matt <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(matt)
matt <- makeCacheMatrix(matrix(4:1,2,2))
cacheSolve(matt)
matt$getMatrix()
matt$getMatrixInv()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt$getMatrixInv()
cacheSolve(matt)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt <- makeCacheMatrix(matrix(4:1,2,2))
cacheSolve(matt)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
?"<<-"
p =3
p
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
matt
matt <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(matt)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
matt <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(matt)
cacheSolve(matt)
z <- matt
cacheSolve(z)
x <-matrix()
x
is.na(x)
x <- makeCacheMatrix(matrix(1:1,1,1))
x$getMatInv()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(matrix(1:1,1,1))
x$getMatInv()
cacheSolve(x)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(matrix(1:1,1,1))
x$getMatInv()
cacheSolve(x)
cacheSolve(x)
x$getMatInv()
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(matrix(1:1,1,1))
x$getMatInv()
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
matt <- makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(matt)
matt$getMatrix()
matt <- makeCacheMatrix(matrix(c(1,2,3,34,2,1,34,5,5),3,3))
cacheSolve(matt)
cacheSolve(matt)
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
source('~/Rprog/ProgrammingAssignment2/cachematrix.R')
library(datasets)
data("iris")
?iris
iris
tapply(iris$Sepal.Length,iris$Species,mean)
round(tapply(iris$Sepal.Length,iris$Species,mean))
class(tapply(iris$Sepal.Length,iris$Species,mean))
debug(ls)
ls
ls()
debug(ls)
ls()
Q
Q
library(datasets)
data(mtcars)
data
Quit
Q
Q
Q
Q
Q
Q
Q
Q
makeVector$set(2)
Q
Q
apply
nn
